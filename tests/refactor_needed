"""Unit tests for locating_sos - currently not working fully"""
import os
import os.path
import pytest

from sos_ansible.modules.locating_sos import LocateReports

class TestLocateReports:
    """Testing Instance"""

    def setup_method(self):
        """Creating object"""
        self.report_data = LocateReports()
        self.data = os.path.abspath(os.path.dirname(testdata.__file__))

    def test_locate_reports_not_found(self):
        """Testing Failures"""
        invalid_dir = self.report_data.get_tower_hostname(self.data)
        assert invalid_dir == "NOTFOUND"

    @pytest.mark.parametrize(
        "sosdir,expected",
        [
            ("000000/sosreport-test-000000", False),
            ("0123456/sosreport-test-123456", True),
        ],
    )
    def test_locate_reports_get_hostname(self, sosdir, expected):
        """Testing function get_tower_hostname"""
        join_dir = os.path.join(self.data, sosdir)
        assert self.report_data.get_tower_hostname(join_dir) == (
            "testnode",
            expected,
        )

    @pytest.mark.parametrize(
        "sosdir,hostname, expected",
        [("000000", "testnode", False), ("0123456", "testnode", True)],
    )
    def test_locate_outdata(self, sosdir, hostname, expected):
        """Testing function run"""
        outdata = self.report_data.run(self.data, sosdir)
        print(outdata)
        assert hostname in outdata[0]["hostname"]
        assert outdata[0]["controller"] is expected



"""Unit tests for file_handling - currently not working fully"""
import os
import os.path
import json
import pytest

from sos_ansible.modules.file_handling import (
    read_policy,
    validate_out_dir,
    create_case_dir,
    create_output,
)

from sos_ansible.tests import testdata


policy_mock = json.loads(
    """{
    "Filesystem": {
        "files": [
            "df"
        ],
        "path": "",
        "query": "100%"
    }
}
"""
)


class TestFileHandling:
    """Testing Instance"""

    def setup_method(self):
        """Creating object"""
        self.data = os.path.abspath(os.path.dirname(testdata.__file__))

    @pytest.fixture
    def cleanup_fixture(self):
        """My Cleanup Fixture"""
        try:
            os.remove("sos-ansible.log")
        except Exception as error:  # pylint: disable=broad-except
            print(error)

    @pytest.mark.parametrize(
        "file, expected",
        [
            ("rules.json", policy_mock),
            ("empty.json", {}),
            ("missing.json", {}),
        ],
    )
    @pytest.mark.usefixtures("cleanup_fixture")
    def test_read_policy(self, file, expected):
        """Testing read_policy Failures"""
        outdata = read_policy(os.path.join(self.data, file))
        assert expected == outdata

    def test_validate_out_dir(self):
        """Testing validate_out_dir Failures"""
        outdata = os.path.join(self.data, "outdata")
        case_out = os.path.join(outdata, "9999999")
        validate_out_dir("9999999", outdata)
        assert not os.path.isdir(case_out)

    def test_validate_out_dir_exist(self):
        """Testing validate_out_dir Failures"""
        outdata = os.path.join(self.data, "outdata")
        case_out = os.path.join(outdata, "9999999")
        os.makedirs(case_out)
        validate_out_dir("9999999", outdata)
        assert not os.path.isdir(case_out)

    def test_create_case_dir(self):
        """Testing create_dir Failures"""
        tgt_dir = os.path.join(self.data, "outdata")
        create_case_dir("9999999", "testnode", tgt_dir)
        assert os.path.isdir(os.path.join(tgt_dir, "9999999"))
        assert os.path.isdir(os.path.join(tgt_dir, "9999999", "testnode"))

    def test_create_output(self):
        """Testing create_output Failures"""
        input_data = """A test file
        Second content
        """
        create_output(self.data, "fake_rule", input_data)
        assert os.path.isfile(os.path.join(self.data, "fake_rule"))

    def test_process_rule(self):
        """Testing process_rule Failures"""

    def test_rules_processing(self):
        """Testing rules_processing Failures"""

"""Unit tests for config_manager - currently not working fully"""
import os
import pytest

from sos_ansible.modules.config_manager import ConfigParser
from sos_ansible.tests import testdata


class TestFileHandling:
    """Testing Instance"""

    def setup_method(self):
        """Creating object"""
        self.data = os.path.abspath(os.path.dirname(testdata.__file__))
        self.config = ConfigParser(home_dir=self.data, tgt_file="sos_ansible.ini")

    @pytest.fixture
    def cleanup_fixture(self):
        """My Cleanup Fixture"""
        try:
            print(self.config.config_file)
            os.remove(self.config.config_file)
        except Exception as error:  # pylint: disable=broad-except
            print(error)

    @pytest.mark.usefixtures("cleanup_fixture")
    @pytest.mark.parametrize(
        "expected",
        [("files")],
    )
    def test_set_config(self, expected):
        """Validating configuration generated automatically"""
        self.config.setup()
        with open(self.config.config_file, "r", encoding="utf-8") as file:
            file_data = file.read()
        assert expected in file_data



"""Test Data to be created as fixtures"""

testdata/000000/sosreport-test-000000/etc/hostname
testnode

testdata/0123456/sosreport-test-123456/etc/tower/conf.d/cluster_host_id.py
# Ansible Automation Platform controller redis settings.
# TODO: Remove CLUSTER_HOST_ID in favor of storing the host routable name in the database
# usage of cluster_host is a stop gap.

CLUSTER_HOST_ID = 'testnode'

testdata/rules.json
{
    "Filesystem": {
        "files": [
            "df"
        ],
        "path": "",
        "query": "100%"
    }
}

